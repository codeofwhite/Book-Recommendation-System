version: '3.8'

services:
  # --- Auth Service ---
  auth_db:
    image: mysql:8.0
    container_name: auth_mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: your_auth_root_password
      MYSQL_DATABASE: auth_db
      MYSQL_USER: auth_user
      MYSQL_PASSWORD: auth_password
      MYSQL_DEBEZIUM_USER: debezium
      MYSQL_DEBEZIUM_PASSWORD: dbz
    command:
      - --default-authentication-plugin=mysql_native_password
      - --binlog-format=ROW # 启用 binlog，Debezium 需要
      - --log-bin=mysql-bin # 启用 binlog，Debezium 需要
      - --server-id=1                   # <--- IMPORTANT: For Debezium, MySQL needs a unique server-id
    ports:
      - "3307:3306"
    volumes:
      - auth_mysql_data:/var/lib/mysql
      - ./init_debezium_user.sql:/docker-entrypoint-initdb.d/init_debezium_user.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s

  auth_service:
    build: ./auth_service
    ports:
      - "5000:5000"
    environment:
      DB_HOST: auth_db
      DB_USER: auth_user
      DB_PASSWORD: auth_password
      DB_NAME: auth_db
    depends_on:
      auth_db:
        condition: service_healthy

  # --- Book Management Service (MongoDB) ---
  book_db_mongo:
    build: ./mongo_custom_image # 指向你的自定义镜像 Dockerfile 路径
    container_name: book_mongo_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: book_user
      MONGO_INITDB_ROOT_PASSWORD: book_password
      MONGO_INITDB_DATABASE: book_manage_db
    ports:
      - "27017:27017"
    volumes:
      - book_mongo_data:/data/db # 只保留数据持久化卷
      # - ./mongodb_keyfile.txt:/etc/mongo/mongodb_keyfile.txt:ro # 这行必须删除！
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet", "-u", "book_user", "-p", "book_password", "--authenticationDatabase", "admin"]
      interval: 5s
      timeout: 5s
      retries: 10
    command:
      - mongod
      - --replSet
      - dbrs
      - --keyFile
      - /etc/mongo/mongodb_keyfile.txt # Keyfile 现在在镜像内部
      - --bind_ip_all
  
  # 初始化 MongoDB 副本集（Debezium 需要）
  mongo_setup:
    image: mongo:latest
    container_name: mongo_setup
    networks:
      - default
    depends_on:
      book_db_mongo:
        condition: service_healthy # <--- 确保这里是 service_healthy
    command: >
      bash -c "
        mongosh --host book_db_mongo:27017 --username book_user --password book_password --authenticationDatabase admin <<EOF
          rs.initiate({
            _id: 'dbrs',
            members: [ { _id: 0, host: 'book_db_mongo:27017' } ]
          });EOF
      "

  book_manage:
    build: ./book_manage
    ports:
      - "5001:5001"
    environment:
      MONGO_HOST: book_db_mongo
      MONGO_USER: book_user
      MONGO_PASSWORD: book_password
      MONGO_DB_NAME: book_manage_db
    depends_on:
      book_db_mongo:
        condition: service_healthy

  # --- User Engagement Service (Likes & Collections) ---
  user_engagement_db:
    image: mysql:8.0
    container_name: user_engagement_mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: your_engagement_root_password # Set a strong password
      MYSQL_DATABASE: book_engagement
      MYSQL_USER: engagement_user
      MYSQL_PASSWORD: engagement_password
      MYSQL_DEBEZIUM_USER: debezium # Re-use or create new for this DB
      MYSQL_DEBEZIUM_PASSWORD: dbz # Re-use or create new for this DB
    command:
      - --default-authentication-plugin=mysql_native_password
      - --binlog-format=ROW
      - --log-bin=mysql-bin
      - --server-id=2 # IMPORTANT: Must be a unique server-id for Debezium across all MySQL instances
    ports:
      - "3309:3306" # Map to a new host port
    volumes:
      - user_engagement_mysql_data:/var/lib/mysql
      # You might need an init script here if you want to pre-create Debezium user specifically for this DB
      # - ./init_debezium_user_engagement.sql:/docker-entrypoint-initdb.d/init_debezium_user_engagement.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s

  user_engagement_service:
    build: ./user_engagement_service # Points to the new directory
    container_name: user_engagement_service_app
    ports:
      - "5003:5003" # Expose the Flask
    environment:
      DATABASE_URL: mysql+pymysql://engagement_user:engagement_password@user_engagement_db:3306/book_engagement
      # Optionally, if you use separate env vars in your Flask app:
      # DB_HOST: user_engagement_db
      # DB_USER: engagement_user
      # DB_PASSWORD: engagement_password
      # DB_NAME: book_engagement
    depends_on:
      user_engagement_db:
        condition: service_healthy
      # If this service needs to talk to Kafka later (e.g., to publish engagement events)
      # kafka:
      #   condition: service_healthy

  # --- ETL Infrastructure ---
  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.5.3'
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck: # <-- Add this healthcheck block
      test: ["CMD", "sh", "-c", "nc -z localhost 2181 || exit 1"] # Check if port 2181 is open
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # Give Zookeeper some time to start up initially

  kafka:
    image: confluentinc/cp-kafka:7.5.3 # Or your specific Kafka image version
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094" # For external access if needed
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # --- ADD THESE LINES TO INCREASE MESSAGE SIZE LIMIT ---
      KAFKA_MESSAGE_MAX_BYTES: 1572864000 # Set to 1.5GB (1.5 * 1024 * 1024 * 1024)
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1572864000 # Should be >= KAFKA_MESSAGE_MAX_BYTES
      KAFKA_MAX_REQUEST_SIZE: 1572864000 # Should be >= KAFKA_MESSAGE_MAX_BYTES
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck: # <-- Add this healthcheck block for Kafka
      test: ["CMD", "sh", "-c", "kafka-topics --bootstrap-server kafka:29092 --list > /dev/null || exit 1"] # <-- CHANGED THIS LINE!
      interval: 10s
      timeout: 10s # Kafka can take a bit longer to respond initially
      retries: 5
      start_period: 30s # Give Kafka ample time to fully initialize and connect to Zookeeper

  kafka_connect:
    image: confluentinc/cp-kafka-connect:8.0.0 # 建议指定版本，与Kafka版本匹配
    container_name: kafka_connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_GROUP_ID: connect-cluster-group
      CONNECT_LISTENERS: http://0.0.0.0:8083
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka_connect # 或者删除此行让Docker处理
      
      # --- 内部主题配置 (关键) ---
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      
      # 内部主题的副本因子 (开发环境通常设为1，生产环境根据 Kafka 集群大小配置)
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      
      CONNECT_CONFIG_STORAGE_PARTITIONS: 1 # 通常为1
      CONNECT_OFFSET_STORAGE_PARTITIONS: 25 # 默认值通常为25
      CONNECT_STATUS_STORAGE_PARTITIONS: 5 # 默认值通常为5

      # 明确设置内部主题的清理策略 (解决 cleanup.policy 问题)
      CONNECT_CONFIG_STORAGE_CLEANUP_POLICY: "compact"
      CONNECT_OFFSET_STORAGE_CLEANUP_POLICY: "compact"
      CONNECT_STATUS_STORAGE_CLEANUP_POLICY: "compact"

      # 序列化器配置
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      # 内部转换器也需要设置，以确保 Connect 内部通信正常
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter

      CONNECT_PLUGIN_PATH: "/usr/share/confluent-hub-components"
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      # ... 其他可能存在的配置 ...
    command:
      - bash
      - -c
      - |
        # Wait for Kafka to be fully ready (optional, but can help stability)
        echo "Waiting for Kafka to be ready..."
        cub kafka-ready -b kafka:29092 1 20
        echo "Kafka is ready. Installing Debezium connectors..."
        confluent-hub install --no-prompt debezium/debezium-connector-mysql:3.1.2
        confluent-hub install --no-prompt debezium/debezium-connector-mongodb:3.1.2
        /etc/confluent/docker/run # 运行 Kafka Connect
    depends_on:
      kafka:
        condition: service_healthy
      auth_db: # <--- ADD THIS: Kafka Connect also depends on the database it's connecting to
        condition: service_healthy
      book_db_mongo: # <--- ADD THIS: Kafka Connect also depends on the database it's connecting to
        condition: service_healthy
      mongo_setup: # <--- ADD THIS: Ensure MongoDB replica set is initialized
        condition: service_completed_successfully
    networks:
      - default

  # --- Recommendation Service DB ---
  recommendation_db:
    image: mysql:8.0 # 或者 postgres:latest
    container_name: recommendation_mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: your_rec_root_password
      MYSQL_DATABASE: recommendation_db # 推荐服务的独立数据库
      MYSQL_USER: rec_user
      MYSQL_PASSWORD: rec_password
    ports:
      - "3308:3306" # 映射到宿主机的 3308 端口
    volumes:
      - recommendation_mysql_data:/var/lib/mysql
      - ./init_recommendation_db.sql:/docker-entrypoint-initdb.d/init_recommendation_db.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s

  # --- Recommendation Service (Python/Flask) ---
  recommendation_service:
    build: ./recommendation_service # 推荐服务 Dockerfile 目录
    ports:
      - "5002:5002" # 推荐服务暴露端口
    environment:
      REC_DB_HOST: recommendation_db # 连接到推荐服务自己的数据库
      REC_DB_USER: rec_user
      REC_DB_PASSWORD: rec_password
      REC_DB_NAME: recommendation_db
      KAFKA_BROKER_URL: kafka:29092 # Kafka Broker 地址
    depends_on:
      recommendation_db:
        condition: service_healthy
      kafka:
        condition: service_healthy # 推荐服务可能需要连接 Kafka 进行实时推荐

  # --- ETL Spark Processor (作为消费者) ---
  spark_etl_processor:
    build: ./spark_etl_processor
    container_name: spark_etl_processor
    environment:
      KAFKA_BROKER_URL: kafka:29092
      REC_DB_HOST: recommendation_db
      REC_DB_USER: rec_user
      REC_DB_PASSWORD: rec_password
      REC_DB_NAME: recommendation_db
    depends_on:
      kafka:
        condition: service_healthy
      recommendation_db:
        condition: service_healthy
      auth_db:
        condition: service_healthy
      book_db_mongo:
        condition: service_healthy
    command: /opt/bitnami/spark/bin/spark-submit --master local[*] --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0,org.apache.kafka:kafka-clients:3.4.1,org.mongodb.spark:mongo-spark-connector_2.12:3.0.1,mysql:mysql-connector-java:8.0.28 /app/etl_script.py --kafka-brokers ${KAFKA_BROKER_URL} --rec-db-host ${REC_DB_HOST} --rec-db-user ${REC_DB_USER} --rec-db-password ${REC_DB_PASSWORD} --rec-db-name ${REC_DB_NAME}

volumes:
  auth_mysql_data:
  book_mongo_data:
  zookeeper_data: # Zookeeper 数据持久化
  kafka_data:     # Kafka 数据持久化
  recommendation_mysql_data: # 推荐服务数据库持久化
  user_engagement_mysql_data: