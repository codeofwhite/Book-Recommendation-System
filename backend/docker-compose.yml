services:
  # --- Auth Service ---
  auth_db:
    image: mysql:8.0
    container_name: auth_mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: your_auth_root_password
      MYSQL_DATABASE: auth_db
      MYSQL_USER: auth_user
      MYSQL_PASSWORD: auth_password
      MYSQL_DEBEZIUM_USER: debezium
      MYSQL_DEBEZIUM_PASSWORD: dbz
    command:
      - --default-authentication-plugin=mysql_native_password
      - --binlog-format=ROW # 启用 binlog，Debezium 需要
      - --log-bin=mysql-bin # 启用 binlog，Debezium 需要
      - --server-id=1                   # <--- IMPORTANT: For Debezium, MySQL needs a unique server-id
    ports:
      - "3307:3306"
    volumes:
      - auth_mysql_data:/var/lib/mysql
      - ./init_debezium_user.sql:/docker-entrypoint-initdb.d/init_debezium_user.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s

  auth_service:
    build: ./auth_service
    ports:
      - "5000:5000"
    environment:
      DB_HOST: auth_db
      DB_USER: auth_user
      DB_PASSWORD: auth_password
      DB_NAME: auth_db
    depends_on:
      auth_db:
        condition: service_healthy

  # --- Book Management Service (MongoDB) ---
  book_db_mongo:
    build: ./mongo_custom_image # 指向你的自定义镜像 Dockerfile 路径
    container_name: book_mongo_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: book_user
      MONGO_INITDB_ROOT_PASSWORD: book_password
      MONGO_INITDB_DATABASE: book_manage_db
    ports:
      - "27017:27017"
    volumes:
      - book_mongo_data:/data/db # 只保留数据持久化卷
    # - ./mongodb_keyfile.txt:/etc/mongo/mongodb_keyfile.txt:ro # 这行必须删除！
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet", "-u", "book_user", "-p", "book_password", "--authenticationDatabase", "admin"]
      interval: 5s
      timeout: 5s
      retries: 10
    command:
      - mongod
      - --replSet
      - dbrs
      - --keyFile
      - /etc/mongo/mongodb_keyfile.txt # Keyfile 现在在镜像内部
      - --bind_ip_all
  
  # 初始化 MongoDB 副本集（Debezium 需要）
  mongo_setup:
    image: mongo:latest
    container_name: mongo_setup
    networks:
      - default
    depends_on:
      book_db_mongo:
        condition: service_healthy # <--- 确保这里是 service_healthy
    command: >
      bash -c "
        mongosh --host book_db_mongo:27017 --username book_user --password book_password --authenticationDatabase admin <<EOF
          rs.initiate({
            _id: 'dbrs',
            members: [ { _id: 0, host: 'book_db_mongo:27017' } ]
          });EOF
      "

  book_manage:
    build: ./book_manage
    ports:
      - "5001:5001"
    environment:
      MONGO_HOST: book_db_mongo
      MONGO_USER: book_user
      MONGO_PASSWORD: book_password
      MONGO_DB_NAME: book_manage_db
    depends_on:
      book_db_mongo:
        condition: service_healthy

  # --- User Engagement Service (Likes & Collections) ---
  user_engagement_db:
    image: mysql:8.0
    container_name: user_engagement_mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: your_engagement_root_password # Set a strong password
      MYSQL_DATABASE: book_engagement
      MYSQL_USER: engagement_user
      MYSQL_PASSWORD: engagement_password
      MYSQL_DEBEZIUM_USER: debezium # Re-use or create new for this DB
      MYSQL_DEBEZIUM_PASSWORD: dbz # Re-use or create new for this DB
    command:
      - --default-authentication-plugin=mysql_native_password
      - --binlog-format=ROW
      - --log-bin=mysql-bin
      - --server-id=2 # IMPORTANT: Must be a unique server-id for Debezium across all MySQL instances
    ports:
      - "3309:3306" # Map to a new host port
    volumes:
      - user_engagement_mysql_data:/var/lib/mysql
      - ./init_debezium_user_engagement.sql:/docker-entrypoint-initdb.d/init_debezium_user_engagement.sql # <--- 解除注释并添加这一行
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s

  user_engagement_service:
    build: ./user_engagement_service # Points to the new directory
    container_name: user_engagement_service_app
    ports:
      - "5003:5003" # Expose the Flask
    environment:
      DATABASE_URL: mysql+pymysql://engagement_user:engagement_password@user_engagement_db:3306/book_engagement
    # Optionally, if you use separate env vars in your Flask app:
    # DB_HOST: user_engagement_db
    # DB_USER: engagement_user
    # DB_PASSWORD: engagement_password
    # DB_NAME: book_engagement
    depends_on:
      user_engagement_db:
        condition: service_healthy
  # If this service needs to talk to Kafka later (e.g., to publish engagement events)
  # kafka:
  #   condition: service_healthy

  # --- ETL Infrastructure ---
  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.5.3'
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck: # <-- Add this healthcheck block
      test: ["CMD", "sh", "-c", "nc -z localhost 2181 || exit 1"] # Check if port 2181 is open
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # Give Zookeeper some time to start up initially

  kafka:
    image: confluentinc/cp-kafka:7.5.3 # Or your specific Kafka image version
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094" # For external access if needed
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # --- ADD THESE LINES TO INCREASE MESSAGE SIZE LIMIT ---
      KAFKA_MESSAGE_MAX_BYTES: 1572864000 # Set to 1.5GB (1.5 * 1024 * 1024 * 1024)
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1572864000 # Should be >= KAFKA_MESSAGE_MAX_BYTES
      KAFKA_MAX_REQUEST_SIZE: 1572864000 # Should be >= KAFKA_MESSAGE_MAX_BYTES
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck: # <-- Add this healthcheck block for Kafka
      test: ["CMD", "sh", "-c", "kafka-topics --bootstrap-server kafka:29092 --list > /dev/null || exit 1"] # <-- CHANGED THIS LINE!
      interval: 10s
      timeout: 10s # Kafka can take a bit longer to respond initially
      retries: 5
      start_period: 30s # Give Kafka ample time to fully initialize and connect to Zookeeper

  kafka_connect:
    image: confluentinc/cp-kafka-connect:8.0.0 # 建议指定版本，与Kafka版本匹配
    container_name: kafka_connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_GROUP_ID: connect-cluster-group
      CONNECT_LISTENERS: http://0.0.0.0:8083
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka_connect # 或者删除此行让Docker处理
      
      # --- 内部主题配置 (关键) ---
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      
      # 内部主题的副本因子 (开发环境通常设为1，生产环境根据 Kafka 集群大小配置)
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      
      CONNECT_CONFIG_STORAGE_PARTITIONS: 1 # 通常为1
      CONNECT_OFFSET_STORAGE_PARTITIONS: 25 # 默认值通常为25
      CONNECT_STATUS_STORAGE_PARTITIONS: 5 # 默认值通常为5

      # 明确设置内部主题的清理策略 (解决 cleanup.policy 问题)
      CONNECT_CONFIG_STORAGE_CLEANUP_POLICY: "compact"
      CONNECT_OFFSET_STORAGE_CLEANUP_POLICY: "compact"
      CONNECT_STATUS_STORAGE_CLEANUP_POLICY: "compact"

      CONNECT_HEAP_OPTS: "-Xmx2G -Xms2G" # 例如，限制为2GB。根据您的实际可用内存调整
      CONNECT_LINGER_MS: 50 # 生产者在发送批次前等待的时间，单位毫秒。适当增加可减少请求次数
      CONNECT_BATCH_SIZE: 8192 # 生产者发送的批次大小，单位字节。适当增加可提高吞吐量
      CONNECT_MAX_REQUEST_SIZE: 1048576 # 客户端可发送的最大请求字节数
      CONNECT_MAX_PARTITION_FETCH_BYTES: 1048576 # 每个分区的最大字节数

      # 序列化器配置
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      # 内部转换器也需要设置，以确保 Connect 内部通信正常
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter

      CONNECT_PLUGIN_PATH: "/usr/share/confluent-hub-components"
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
    # ... 其他可能存在的配置 ...
    command:
      - bash
      - -c
      - |
        # Wait for Kafka to be fully ready (optional, but can help stability)
        echo "Waiting for Kafka to be ready..."
        cub kafka-ready -b kafka:29092 1 20
        echo "Kafka is ready. Installing Debezium connectors..."
        confluent-hub install --no-prompt debezium/debezium-connector-mysql:3.1.2
        confluent-hub install --no-prompt debezium/debezium-connector-mongodb:3.1.2
        echo "Kafka is ready. Installing clickhouse/kafka-connect-sink:1.3.1"
        confluent-hub install --no-prompt clickhouse/kafka-connect-sink:1.3.1
        /etc/confluent/docker/run
    depends_on:
      kafka:
        condition: service_healthy
      auth_db: # <--- ADD THIS: Kafka Connect also depends on the database it's connecting to
        condition: service_healthy
      book_db_mongo: # <--- ADD THIS: Kafka Connect also depends on the database it's connecting to
        condition: service_healthy
      mongo_setup: # <--- ADD THIS: Ensure MongoDB replica set is initialized
        condition: service_completed_successfully
      clickhouse: # Kafka Connect 需要 ClickHouse 来作为 Sink
        condition: service_healthy
    networks:
      - default

  # --- Recommendation Service DB ---
  recommendation_db:
    image: mysql:8.0 # 或者 postgres:latest
    container_name: recommendation_mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: your_rec_root_password
      MYSQL_DATABASE: recommendation_db # 推荐服务的独立数据库
      MYSQL_USER: rec_user
      MYSQL_PASSWORD: rec_password
    ports:
      - "3308:3306" # 映射到宿主机的 3308 端口
    volumes:
      - recommendation_mysql_data:/var/lib/mysql
      - ./init_recommendation_db.sql:/docker-entrypoint-initdb.d/init_recommendation_db.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s

  # --- Recommendation Service (Python/Flask) ---
  # recommendation_service:
  #   build: ./recommendation_service # 推荐服务 Dockerfile 目录
  #   ports:
  #     - "5002:5002" # 推荐服务暴露端口
  #   environment:
  #     REC_DB_HOST: recommendation_db # 连接到推荐服务自己的数据库
  #     REC_DB_USER: rec_user
  #     REC_DB_PASSWORD: rec_password
  #     REC_DB_NAME: recommendation_db
  #     KAFKA_BROKER_URL: kafka:29092 # Kafka Broker 地址
  #   depends_on:
  #     recommendation_db:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy # 推荐服务可能需要连接 Kafka 进行实时推荐

  # --- ETL Spark Processor (作为消费者) ---
  spark_etl_processor:
    build: ./spark_etl_processor
    container_name: spark_etl_processor
    environment:
      KAFKA_BROKER_URL: kafka:29092
      REC_DB_HOST: recommendation_db
      REC_DB_USER: rec_user
      REC_DB_PASSWORD: rec_password
      REC_DB_NAME: recommendation_db
      CLICKHOUSE_HOST: clickhouse # 添加 ClickHouse 连接信息
      CLICKHOUSE_PORT: 8123       # HTTP 端口
      CLICKHOUSE_USER: default    # 默认用户
      CLICKHOUSE_PASSWORD:        # 默认无密码
    depends_on:
      kafka:
        condition: service_healthy
      recommendation_db:
        condition: service_healthy
      auth_db:
        condition: service_healthy
      book_db_mongo:
        condition: service_healthy
      clickhouse: # Spark ETL 可能会写入 ClickHouse
        condition: service_healthy
    command: /opt/bitnami/spark/bin/spark-submit --master local[*] --driver-memory 2G --executor-memory 2G --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0,org.apache.kafka:kafka-clients:3.4.1,org.mongodb.spark:mongo-spark-connector_2.12:3.0.1,mysql:mysql-connector-java:8.0.28 /app/main.py

  # --- DataX Worker Service ---
  # datax_worker:
  #   build:
  #     context: ./datax_worker # 指向 DataX Dockerfile 所在的目录
  #     dockerfile: Dockerfile
  #   container_name: datax_sync_worker
  #   volumes:
  #     # 挂载一个卷用于存放 DataX 的任务配置文件和日志
  #     - ./datax_jobs:/app/datax/job # DataX 任务配置文件通常放在 datax/job 目录下
  #     - ./datax_logs:/app/datax/log # DataX 日志输出目录
  #   # DataX 需要连接到源数据库（auth_db, user_engagement_db, book_db_mongo）
  #   # 和目标数据库（recommendation_db 或你的离线数仓）
  #   depends_on:
  #     auth_db:
  #       condition: service_healthy
  #     book_db_mongo:
  #       condition: service_healthy
  #     user_engagement_db:
  #       condition: service_healthy
  #     recommendation_db: # 假设你的离线数据会同步到 recommendation_db
  #       condition: service_healthy
  #     clickhouse: # DataX 可能需要同步数据到 ClickHouse
  #       condition: service_healthy
  #   networks:
  #     - default # 确保与所有数据库服务在同一网络
  #   deploy: # 资源限制，根据你的数据量调整
  #     resources:
  #       limits:
  #         cpus: '2.0'
  #         memory: 4G # DataX 可能会消耗较多内存，特别是处理大文件时
  #   command: ["tail", "-f", "/dev/null"] # 保持容器运行，以便手动或通过 cron 触发任务

  # --- ClickHouse Service ---
  clickhouse:
    image: clickhouse/clickhouse-server:23.8 # 推荐使用最新的稳定版
    container_name: clickhouse_db
    ports:
      - "8123:8123"   # HTTP 接口 (用于 ClickHouse Client、JDBC、ODBC 等)
      - "9000:9000"   # 原生 TCP 接口 (用于 clickhouse-client)
      - "9009:9009"   # MySQL 兼容接口 (如果需要，默认不开启)
    volumes:
      - clickhouse_data:/var/lib/clickhouse # 数据持久化
      - clickhouse_logs:/var/log/clickhouse-server # 日志持久化
    ulimits: # ClickHouse 对文件描述符有限制，建议调高
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider 'http://localhost:8123/ping' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s # 给予启动时间

  # --- HDFS Services ---
  # namenode:
  #   image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8 # Hadoop 3.x 镜像
  #   container_name: namenode
  #   ports:
  #     - "9870:9870" # HDFS Web UI
  #     - "9900:9000" # HDFS Default Port
  #   volumes:
  #     - namenode_data:/hadoop/dfs/name # 持久化 NameNode 数据
  #     - ./namenode-entrypoint.sh:/usr/local/bin/namenode-entrypoint.sh # 挂载你的启动脚本
  #   environment:
  #     # These typically come from Hadoop's core-site.xml, but can be set via env vars for Docker
  #     HDFS_CONF_dfs_namenode_name_dir: file:///hadoop/dfs/name
  #     HDFS_CONF_dfs_replication: 1 # For a single-node setup
  #   env_file:
  #     - ./hadoop.env # For HDFS specific configurations (explained below)
  #   healthcheck:
  #     test: ["CMD", "hdfs", "dfsadmin", "-report"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 60s # Give NameNode ample time to start and format
  #   command: ["bash", "/usr/local/bin/namenode-entrypoint.sh"]

  # datanode:
  #   image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8 # Hadoop 3.x 镜像
  #   container_name: datanode
  #   volumes:
  #     - datanode_data:/hadoop/dfs/data # 持久化 DataNode 数据
  #   environment:
  #     HDFS_CONF_dfs_datanode_data_dir: file:///hadoop/dfs/data
  #   env_file:
  #     - ./hadoop.env # For HDFS specific configurations
  #   depends_on:
  #     namenode:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "hdfs", "dfsadmin", "-getServiceState", "hdfs://namenode:9000/"] # Check if connected to NameNode
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s

  # Flink JobManager - NEW ADDITION
  # Flink JobManager (using your custom PyFlink image)
  flink-jobmanager:
    build: ./flink_py_image # Path to your custom Flink Python image Dockerfile
    container_name: flink-jobmanager
    ports:
      - "8081:8081" # Flink Web UI
      - "6123:6123" # RPC 端口
    command: jobmanager # Start JobManager
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: flink-jobmanager
        jobmanager.rpc.port: 6123
        rest.address: flink-jobmanager
        rest.port: 8081
        taskmanager.numberOfTaskSlots: 1
        python.executable: /usr/bin/python3
    volumes:
      - ./flink_jobs:/opt/flink/usrlib # Mount your Flink Job Python script
    depends_on:
      kafka:
        condition: service_healthy
      redis: # Flink job writes to Redis, so depend on it
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/overview || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Flink TaskManager (using your custom PyFlink image)
  flink-taskmanager:
    build: ./flink_py_image # Path to your custom Flink Python image Dockerfile
    container_name: flink-taskmanager
    command: taskmanager # Start TaskManager
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: flink-jobmanager
        jobmanager.rpc.port: 6123
        taskmanager.numberOfTaskSlots: 1
        python.executable: /usr/bin/python3
    depends_on:
      flink-jobmanager:
        condition: service_healthy

  # Flink Job Submitter (one-off service to submit the PyFlink Job)
  flink-job-submitter:
    build: ./flink_py_image
    container_name: flink-job-submitter
    command: >
      bash -c "
        echo 'Waiting for Flink JobManager...' &&
        until curl -f http://flink-jobmanager:8081/overview; do
          sleep 5;
        done &&
        echo 'JobManager is ready. Submitting PyFlink Job...' &&
        /opt/flink/bin/flink run --jarfile /opt/flink/usrlib/jars/flink-sql-connector-kafka-3.0.0-1.17.jar -py /opt/flink/usrlib/scripts/realtime_recommendation_job.py
      " # <-- 注意这一整行
    volumes:
      - ./flink_jars:/opt/flink/usrlib/jars      # 将JAR包挂载到 /opt/flink/usrlib/jars
      - ./flink_jobs:/opt/flink/usrlib/scripts   # 将Python脚本挂载到 /opt/flink/usrlib/scripts
    depends_on:
      flink-jobmanager:
        condition: service_healthy
    restart: "no"

  # Redis Service
  redis:
    image: redis:6.2-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # New: Real-time Recommendation Service (Flask app reading from Redis)
  realtime_recommendation_service:
    build: ./realtime_recommendation_service # Path to your Dockerfile for this service
    container_name: realtime_recommendation_service
    ports:
      - "5004:5004" # Expose on port 5004
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      redis:
        condition: service_healthy # Ensure Redis is up before starting
      flink-job-submitter: # Ensure Flink job potentially started before this service
        condition: service_completed_successfully # Or service_healthy if job is long-running

  # NEW SERVICE: Offline Recommendation Service
  offline_recommendation_service:
    build: ./offline_recommendation_service
    container_name: offline_recommendation_service_app
    ports:
      - "5005:5005" 
    environment:
      REC_DB_HOST: recommendation_db
      REC_DB_USER: rec_user
      REC_DB_PASSWORD: rec_password
      REC_DB_NAME: recommendation_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      OFFLINE_CRON_SCHEDULE: "0 2 * * *" # 例如：每天凌晨2点运行离线计算
    depends_on:
      recommendation_db:
        condition: service_healthy # 依赖推荐数据库
      redis:
        condition: service_healthy # 依赖 Redis 存储结果

  # New Log Ingestion Service (Frontend Logs to Kafka)
  log_service:
    build: ./log_service # 假设你的Flask日志服务代码在 log_service 目录下
    container_name: frontend_log_ingestion
    ports:
      - "5006:5006" # 为日志服务分配一个端口
    environment:
      KAFKA_BROKER_URL: kafka:29092 # 连接到 Kafka
    depends_on:
      kafka:
        condition: service_healthy # 确保 Kafka 启动后再启动日志服务
    # volumes: # 如果需要持久化日志文件，可以加上
    #   - ./logs:/app/logs
    networks:
      - default

  minio:
      image: quay.io/minio/minio:RELEASE.2025-04-22T22-12-26Z
      container_name: minio
      ports:
        - "9002:9000" # MinIO API 端口
        - "9001:9001" # MinIO Console (UI) 端口
      environment:
        MINIO_ROOT_USER: ${MINIO_ROOT_USER}
        MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        # ⬇️ 将原来的环境变量替换为这个 ⬇️
        MINIO_CORS_ALLOW_ORIGIN: "http://localhost:5173"
      volumes:
        - minio_data:/data
      command: minio server /data --console-address ":9001"
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:9002/minio/health/live"]
        interval: 30s
        timeout: 20s
        retries: 3

volumes:
  auth_mysql_data:
  book_mongo_data:
  zookeeper_data: # Zookeeper 数据持久化
  kafka_data:     # Kafka 数据持久化
  recommendation_mysql_data: # 推荐服务数据库持久化
  user_engagement_mysql_data:
  # 为 DataX 的任务和日志添加新的卷，这样即使容器重建，这些数据也能保留
  # datax_jobs:
  # datax_logs:
  clickhouse_data: # 为 ClickHouse 添加数据卷
  clickhouse_logs: # 为 ClickHouse 添加日志卷
  # namenode_data: # NameNode 数据卷
  # datanode_data: # DataNode 数据卷
  redis_data:
  minio_data: